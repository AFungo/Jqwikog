description = "Jqwik Documentation generation"

static releaseNotesVersion(String versionString) {
	def version = versionString.replaceAll(/\./, '').toLowerCase()
	return version
}

static isSnapshot(String versionString) {
	return versionString.contains('SNAPSHOT')
}

static gitVersion(String versionString) {
	if (isSnapshot(versionString))
		return 'master'
	else
		return versionString
}

static docsVersion(String versionString) {
	if (isSnapshot(versionString))
		return 'snapshot'
	else
		return versionString
}

task expandUserGuide(type: Copy) {
	from 'src/docs/'
	into "$buildDir/docs"
	include 'user-guide.template.md'
	rename { file -> 'user-guide.md'}
	expand(
		version: jqwikVersion,
		gitVersion: gitVersion(jqwikVersion),
		docsVersion: gitVersion(jqwikVersion),
		releaseNotesVersion: releaseNotesVersion(jqwikVersion),
		junitPlatformVersion: junitPlatformVersion,
		junitJupiterVersion: junitJupiterVersion,
	)
}

task generateUserGuideToc(type:Exec) {
	dependsOn expandUserGuide

	workingDir "$buildDir/docs"

	commandLine 'doctoc', '--maxlevel', '4',  'user-guide.md'
}

task generateJavaDoc(type:Javadoc) {
	source = file("${rootDir}/api/src/main/java")
	failOnError = false
	destinationDir = file("${buildDir}/docs/javadoc")
}

task expandJavaDocIndexHtml(type: Copy) {
	from 'src/docs/'
	into "$buildDir/javadoc"
	include 'index.template.html'
	rename { file -> 'index.html' }
	expand(
		version: jqwikVersion
	)
}

task generateDocumentation {
	dependsOn(generateUserGuideToc, generateJavaDoc, expandJavaDocIndexHtml)
	doLast {
		String docsFolder = "${buildDir}/docs-${docsVersion(jqwikVersion)}"
		file(docsFolder).delete()
		file("${buildDir}/docs").renameTo(docsFolder)
		String javadocCurrentFolder = "${buildDir}/javadoc-current"
		file(javadocCurrentFolder).delete()
		if (!isSnapshot(jqwikVersion)) {
			file("${buildDir}/javadoc").renameTo(javadocCurrentFolder)
		} else {
			file("${buildDir}/javadoc").delete()
		}
	}
}

test {
	useJUnitPlatform {
		includeEngines "jqwik"
	}

	exclude 'net/jqwik/docs/**' // some tests are supposed to fail

	// testLogging.showStandardStreams = true
}

dependencies {
	testCompile(project(":base"))
	testCompile("org.mockito:mockito-core:2.23.4")
	testCompile("org.assertj:assertj-core:3.11.1")
	testCompile("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}")

	// Only needed to check interferences between Jupiter and jqwik
	testCompile("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
}

